<launch>

  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" default="true"/> <!-- false -->
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>
  <arg name="world_name" default="training_world.world"/>

  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <!--<arg name="world_name" value="$(find panda_gazebo)/worlds/$(arg world_name)"/>-->
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
  </include>
  <!-- This argument sets the initial joint states -->
  <arg name="initial_joint_states"
  default=" -J human_model::jRightShoulder_rotx 1.00"/>


  
  <!-- Load the URDF into the ROS Parameter Server -->
  <param name="robot_description"
    command="$(find xacro)/xacro '$(find panda_description)/human_urdf/simplified_human.urdf'" />

  <!--<group ns="human">-->
  <!-- Specify the loacation of the robot -->
  <arg name="x" default="0.8"/>
  <arg name="y" default="0.0"/>
  <arg name="z" default="1.0"/>

  <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
  <!--<node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
    args="-urdf -model human_model 
          -param /robot_description
          -unpause
          -x $(arg x)
          -y $(arg y)
          -z $(arg z)"/>-->
  
  <!-- Launch the controller -->
  <!--<include file="$(find panda_control)/launch/human_positioncontrol.launch"/>-->
  <!--</group>-->
  
</launch>
