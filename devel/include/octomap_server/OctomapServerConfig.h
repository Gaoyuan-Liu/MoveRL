//#line 2 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
//
// File autogenerated for the octomap_server package
// by the dynamic_reconfigure package.
// Please do not edit.
//
// ********************************************************/

#ifndef __octomap_server__OCTOMAPSERVERCONFIG_H__
#define __octomap_server__OCTOMAPSERVERCONFIG_H__

#if __cplusplus >= 201103L
#define DYNAMIC_RECONFIGURE_FINAL final
#else
#define DYNAMIC_RECONFIGURE_FINAL
#endif

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace octomap_server
{
  class OctomapServerConfigStatics;

  class OctomapServerConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l,
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }
      virtual ~AbstractParamDescription() = default;

      virtual void clamp(OctomapServerConfig &config, const OctomapServerConfig &max, const OctomapServerConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const OctomapServerConfig &config1, const OctomapServerConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, OctomapServerConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const OctomapServerConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, OctomapServerConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const OctomapServerConfig &config) const = 0;
      virtual void getValue(const OctomapServerConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template <class T>
    class ParamDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level,
          std::string a_description, std::string a_edit_method, T OctomapServerConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T OctomapServerConfig::* field;

      virtual void clamp(OctomapServerConfig &config, const OctomapServerConfig &max, const OctomapServerConfig &min) const override
      {
        if (config.*field > max.*field)
          config.*field = max.*field;

        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const OctomapServerConfig &config1, const OctomapServerConfig &config2) const override
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, OctomapServerConfig &config) const override
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const OctomapServerConfig &config) const override
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, OctomapServerConfig &config) const override
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const OctomapServerConfig &config) const override
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const OctomapServerConfig &config, boost::any &val) const override
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      virtual ~AbstractGroupDescription() = default;

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, OctomapServerConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template<class T, class PT>
    class GroupDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, OctomapServerConfig &top) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const override
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T PT::* field;
      std::vector<OctomapServerConfig::AbstractGroupDescriptionConstPtr> groups;
    };

class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(OctomapServerConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("compress_map"==(*_i)->name){compress_map = boost::any_cast<bool>(val);}
        if("incremental_2D_projection"==(*_i)->name){incremental_2D_projection = boost::any_cast<bool>(val);}
        if("filter_speckles"==(*_i)->name){filter_speckles = boost::any_cast<bool>(val);}
        if("max_depth"==(*_i)->name){max_depth = boost::any_cast<int>(val);}
        if("pointcloud_min_z"==(*_i)->name){pointcloud_min_z = boost::any_cast<double>(val);}
        if("pointcloud_max_z"==(*_i)->name){pointcloud_max_z = boost::any_cast<double>(val);}
        if("occupancy_min_z"==(*_i)->name){occupancy_min_z = boost::any_cast<double>(val);}
        if("occupancy_max_z"==(*_i)->name){occupancy_max_z = boost::any_cast<double>(val);}
        if("sensor_model_max_range"==(*_i)->name){sensor_model_max_range = boost::any_cast<double>(val);}
        if("sensor_model_hit"==(*_i)->name){sensor_model_hit = boost::any_cast<double>(val);}
        if("sensor_model_miss"==(*_i)->name){sensor_model_miss = boost::any_cast<double>(val);}
        if("sensor_model_min"==(*_i)->name){sensor_model_min = boost::any_cast<double>(val);}
        if("sensor_model_max"==(*_i)->name){sensor_model_max = boost::any_cast<double>(val);}
        if("filter_ground"==(*_i)->name){filter_ground = boost::any_cast<bool>(val);}
        if("ground_filter_distance"==(*_i)->name){ground_filter_distance = boost::any_cast<double>(val);}
        if("ground_filter_angle"==(*_i)->name){ground_filter_angle = boost::any_cast<double>(val);}
        if("ground_filter_plane_distance"==(*_i)->name){ground_filter_plane_distance = boost::any_cast<double>(val);}
      }
    }

    bool compress_map;
bool incremental_2D_projection;
bool filter_speckles;
int max_depth;
double pointcloud_min_z;
double pointcloud_max_z;
double occupancy_min_z;
double occupancy_max_z;
double sensor_model_max_range;
double sensor_model_hit;
double sensor_model_miss;
double sensor_model_min;
double sensor_model_max;
bool filter_ground;
double ground_filter_distance;
double ground_filter_angle;
double ground_filter_plane_distance;

    bool state;
    std::string name;

    
}groups;



//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool compress_map;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool incremental_2D_projection;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool filter_speckles;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int max_depth;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double pointcloud_min_z;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double pointcloud_max_z;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double occupancy_min_z;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double occupancy_max_z;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double sensor_model_max_range;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double sensor_model_hit;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double sensor_model_miss;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double sensor_model_min;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double sensor_model_max;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool filter_ground;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double ground_filter_distance;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double ground_filter_angle;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double ground_filter_plane_distance;
//#line 231 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("OctomapServerConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }

    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }

    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const OctomapServerConfig &__max__ = __getMax__();
      const OctomapServerConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const OctomapServerConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }

    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const OctomapServerConfig &__getDefault__();
    static const OctomapServerConfig &__getMax__();
    static const OctomapServerConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();

  private:
    static const OctomapServerConfigStatics *__get_statics__();
  };

  template <> // Max and min are ignored for strings.
  inline void OctomapServerConfig::ParamDescription<std::string>::clamp(OctomapServerConfig &config, const OctomapServerConfig &max, const OctomapServerConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class OctomapServerConfigStatics
  {
    friend class OctomapServerConfig;

    OctomapServerConfigStatics()
    {
OctomapServerConfig::GroupDescription<OctomapServerConfig::DEFAULT, OctomapServerConfig> Default("Default", "", 0, 0, true, &OctomapServerConfig::groups);
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.compress_map = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.compress_map = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.compress_map = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(OctomapServerConfig::AbstractParamDescriptionConstPtr(new OctomapServerConfig::ParamDescription<bool>("compress_map", "bool", 0, "Compresses the map losslessly", "", &OctomapServerConfig::compress_map)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(OctomapServerConfig::AbstractParamDescriptionConstPtr(new OctomapServerConfig::ParamDescription<bool>("compress_map", "bool", 0, "Compresses the map losslessly", "", &OctomapServerConfig::compress_map)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.incremental_2D_projection = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.incremental_2D_projection = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.incremental_2D_projection = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(OctomapServerConfig::AbstractParamDescriptionConstPtr(new OctomapServerConfig::ParamDescription<bool>("incremental_2D_projection", "bool", 0, "Incremental 2D projection", "", &OctomapServerConfig::incremental_2D_projection)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(OctomapServerConfig::AbstractParamDescriptionConstPtr(new OctomapServerConfig::ParamDescription<bool>("incremental_2D_projection", "bool", 0, "Incremental 2D projection", "", &OctomapServerConfig::incremental_2D_projection)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.filter_speckles = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.filter_speckles = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.filter_speckles = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(OctomapServerConfig::AbstractParamDescriptionConstPtr(new OctomapServerConfig::ParamDescription<bool>("filter_speckles", "bool", 0, "Filter speckle nodes (with no neighbors)", "", &OctomapServerConfig::filter_speckles)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(OctomapServerConfig::AbstractParamDescriptionConstPtr(new OctomapServerConfig::ParamDescription<bool>("filter_speckles", "bool", 0, "Filter speckle nodes (with no neighbors)", "", &OctomapServerConfig::filter_speckles)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.max_depth = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.max_depth = 16;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.max_depth = 16;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(OctomapServerConfig::AbstractParamDescriptionConstPtr(new OctomapServerConfig::ParamDescription<int>("max_depth", "int", 0, "Maximum depth when traversing the octree to send out markers. 16: full depth / max. resolution", "", &OctomapServerConfig::max_depth)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(OctomapServerConfig::AbstractParamDescriptionConstPtr(new OctomapServerConfig::ParamDescription<int>("max_depth", "int", 0, "Maximum depth when traversing the octree to send out markers. 16: full depth / max. resolution", "", &OctomapServerConfig::max_depth)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.pointcloud_min_z = -100.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.pointcloud_min_z = 100.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.pointcloud_min_z = -100.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(OctomapServerConfig::AbstractParamDescriptionConstPtr(new OctomapServerConfig::ParamDescription<double>("pointcloud_min_z", "double", 0, "Minimum height of points to consider for insertion", "", &OctomapServerConfig::pointcloud_min_z)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(OctomapServerConfig::AbstractParamDescriptionConstPtr(new OctomapServerConfig::ParamDescription<double>("pointcloud_min_z", "double", 0, "Minimum height of points to consider for insertion", "", &OctomapServerConfig::pointcloud_min_z)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.pointcloud_max_z = -100.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.pointcloud_max_z = 100.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.pointcloud_max_z = 100.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(OctomapServerConfig::AbstractParamDescriptionConstPtr(new OctomapServerConfig::ParamDescription<double>("pointcloud_max_z", "double", 0, "Maximum height of points to consider for insertion", "", &OctomapServerConfig::pointcloud_max_z)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(OctomapServerConfig::AbstractParamDescriptionConstPtr(new OctomapServerConfig::ParamDescription<double>("pointcloud_max_z", "double", 0, "Maximum height of points to consider for insertion", "", &OctomapServerConfig::pointcloud_max_z)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.occupancy_min_z = -100.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.occupancy_min_z = 100.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.occupancy_min_z = -100.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(OctomapServerConfig::AbstractParamDescriptionConstPtr(new OctomapServerConfig::ParamDescription<double>("occupancy_min_z", "double", 0, "Minimum height of occupied cells to consider in the final map", "", &OctomapServerConfig::occupancy_min_z)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(OctomapServerConfig::AbstractParamDescriptionConstPtr(new OctomapServerConfig::ParamDescription<double>("occupancy_min_z", "double", 0, "Minimum height of occupied cells to consider in the final map", "", &OctomapServerConfig::occupancy_min_z)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.occupancy_max_z = -100.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.occupancy_max_z = 100.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.occupancy_max_z = 100.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(OctomapServerConfig::AbstractParamDescriptionConstPtr(new OctomapServerConfig::ParamDescription<double>("occupancy_max_z", "double", 0, "Maximum height of occupied cells to consider in the final map", "", &OctomapServerConfig::occupancy_max_z)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(OctomapServerConfig::AbstractParamDescriptionConstPtr(new OctomapServerConfig::ParamDescription<double>("occupancy_max_z", "double", 0, "Maximum height of occupied cells to consider in the final map", "", &OctomapServerConfig::occupancy_max_z)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.sensor_model_max_range = -1.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.sensor_model_max_range = 100.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.sensor_model_max_range = -1.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(OctomapServerConfig::AbstractParamDescriptionConstPtr(new OctomapServerConfig::ParamDescription<double>("sensor_model_max_range", "double", 0, "Sensor maximum range", "", &OctomapServerConfig::sensor_model_max_range)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(OctomapServerConfig::AbstractParamDescriptionConstPtr(new OctomapServerConfig::ParamDescription<double>("sensor_model_max_range", "double", 0, "Sensor maximum range", "", &OctomapServerConfig::sensor_model_max_range)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.sensor_model_hit = 0.5;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.sensor_model_hit = 1.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.sensor_model_hit = 0.7;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(OctomapServerConfig::AbstractParamDescriptionConstPtr(new OctomapServerConfig::ParamDescription<double>("sensor_model_hit", "double", 0, "Probabilities for hits in the sensor model when dynamically building a map", "", &OctomapServerConfig::sensor_model_hit)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(OctomapServerConfig::AbstractParamDescriptionConstPtr(new OctomapServerConfig::ParamDescription<double>("sensor_model_hit", "double", 0, "Probabilities for hits in the sensor model when dynamically building a map", "", &OctomapServerConfig::sensor_model_hit)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.sensor_model_miss = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.sensor_model_miss = 0.5;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.sensor_model_miss = 0.4;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(OctomapServerConfig::AbstractParamDescriptionConstPtr(new OctomapServerConfig::ParamDescription<double>("sensor_model_miss", "double", 0, "Probabilities for misses in the sensor model when dynamically building a map", "", &OctomapServerConfig::sensor_model_miss)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(OctomapServerConfig::AbstractParamDescriptionConstPtr(new OctomapServerConfig::ParamDescription<double>("sensor_model_miss", "double", 0, "Probabilities for misses in the sensor model when dynamically building a map", "", &OctomapServerConfig::sensor_model_miss)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.sensor_model_min = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.sensor_model_min = 1.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.sensor_model_min = 0.12;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(OctomapServerConfig::AbstractParamDescriptionConstPtr(new OctomapServerConfig::ParamDescription<double>("sensor_model_min", "double", 0, "Minimum probability for clamping when dynamically building a map", "", &OctomapServerConfig::sensor_model_min)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(OctomapServerConfig::AbstractParamDescriptionConstPtr(new OctomapServerConfig::ParamDescription<double>("sensor_model_min", "double", 0, "Minimum probability for clamping when dynamically building a map", "", &OctomapServerConfig::sensor_model_min)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.sensor_model_max = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.sensor_model_max = 1.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.sensor_model_max = 0.97;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(OctomapServerConfig::AbstractParamDescriptionConstPtr(new OctomapServerConfig::ParamDescription<double>("sensor_model_max", "double", 0, "Maximum probability for clamping when dynamically building a map", "", &OctomapServerConfig::sensor_model_max)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(OctomapServerConfig::AbstractParamDescriptionConstPtr(new OctomapServerConfig::ParamDescription<double>("sensor_model_max", "double", 0, "Maximum probability for clamping when dynamically building a map", "", &OctomapServerConfig::sensor_model_max)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.filter_ground = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.filter_ground = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.filter_ground = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(OctomapServerConfig::AbstractParamDescriptionConstPtr(new OctomapServerConfig::ParamDescription<bool>("filter_ground", "bool", 0, "Filter ground plane", "", &OctomapServerConfig::filter_ground)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(OctomapServerConfig::AbstractParamDescriptionConstPtr(new OctomapServerConfig::ParamDescription<bool>("filter_ground", "bool", 0, "Filter ground plane", "", &OctomapServerConfig::filter_ground)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.ground_filter_distance = 0.001;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.ground_filter_distance = 1.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.ground_filter_distance = 0.04;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(OctomapServerConfig::AbstractParamDescriptionConstPtr(new OctomapServerConfig::ParamDescription<double>("ground_filter_distance", "double", 0, "Distance threshold to consider a point as ground", "", &OctomapServerConfig::ground_filter_distance)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(OctomapServerConfig::AbstractParamDescriptionConstPtr(new OctomapServerConfig::ParamDescription<double>("ground_filter_distance", "double", 0, "Distance threshold to consider a point as ground", "", &OctomapServerConfig::ground_filter_distance)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.ground_filter_angle = 0.001;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.ground_filter_angle = 15.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.ground_filter_angle = 0.15;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(OctomapServerConfig::AbstractParamDescriptionConstPtr(new OctomapServerConfig::ParamDescription<double>("ground_filter_angle", "double", 0, "Angular threshold of the detected plane from the horizontal plane to be detected as ground ", "", &OctomapServerConfig::ground_filter_angle)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(OctomapServerConfig::AbstractParamDescriptionConstPtr(new OctomapServerConfig::ParamDescription<double>("ground_filter_angle", "double", 0, "Angular threshold of the detected plane from the horizontal plane to be detected as ground ", "", &OctomapServerConfig::ground_filter_angle)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.ground_filter_plane_distance = 0.001;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.ground_filter_plane_distance = 1.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.ground_filter_plane_distance = 0.07;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(OctomapServerConfig::AbstractParamDescriptionConstPtr(new OctomapServerConfig::ParamDescription<double>("ground_filter_plane_distance", "double", 0, "Distance threshold from z=0 for a plane to be detected as ground", "", &OctomapServerConfig::ground_filter_plane_distance)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(OctomapServerConfig::AbstractParamDescriptionConstPtr(new OctomapServerConfig::ParamDescription<double>("ground_filter_plane_distance", "double", 0, "Distance threshold from z=0 for a plane to be detected as ground", "", &OctomapServerConfig::ground_filter_plane_distance)));
//#line 246 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 246 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(OctomapServerConfig::AbstractGroupDescriptionConstPtr(new OctomapServerConfig::GroupDescription<OctomapServerConfig::DEFAULT, OctomapServerConfig>(Default)));
//#line 369 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<OctomapServerConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__);
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__);
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__);
    }
    std::vector<OctomapServerConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<OctomapServerConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    OctomapServerConfig __max__;
    OctomapServerConfig __min__;
    OctomapServerConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const OctomapServerConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static OctomapServerConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &OctomapServerConfig::__getDescriptionMessage__()
  {
    return __get_statics__()->__description_message__;
  }

  inline const OctomapServerConfig &OctomapServerConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }

  inline const OctomapServerConfig &OctomapServerConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }

  inline const OctomapServerConfig &OctomapServerConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }

  inline const std::vector<OctomapServerConfig::AbstractParamDescriptionConstPtr> &OctomapServerConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<OctomapServerConfig::AbstractGroupDescriptionConstPtr> &OctomapServerConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const OctomapServerConfigStatics *OctomapServerConfig::__get_statics__()
  {
    const static OctomapServerConfigStatics *statics;

    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = OctomapServerConfigStatics::get_instance();

    return statics;
  }


}

#undef DYNAMIC_RECONFIGURE_FINAL

#endif // __OCTOMAPSERVERRECONFIGURATOR_H__
