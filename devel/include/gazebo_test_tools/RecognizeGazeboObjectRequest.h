// Generated by gencpp from file gazebo_test_tools/RecognizeGazeboObjectRequest.msg
// DO NOT EDIT!


#ifndef GAZEBO_TEST_TOOLS_MESSAGE_RECOGNIZEGAZEBOOBJECTREQUEST_H
#define GAZEBO_TEST_TOOLS_MESSAGE_RECOGNIZEGAZEBOOBJECTREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gazebo_test_tools
{
template <class ContainerAllocator>
struct RecognizeGazeboObjectRequest_
{
  typedef RecognizeGazeboObjectRequest_<ContainerAllocator> Type;

  RecognizeGazeboObjectRequest_()
    : name()
    , republish(false)  {
    }
  RecognizeGazeboObjectRequest_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , republish(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef uint8_t _republish_type;
  _republish_type republish;





  typedef boost::shared_ptr< ::gazebo_test_tools::RecognizeGazeboObjectRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gazebo_test_tools::RecognizeGazeboObjectRequest_<ContainerAllocator> const> ConstPtr;

}; // struct RecognizeGazeboObjectRequest_

typedef ::gazebo_test_tools::RecognizeGazeboObjectRequest_<std::allocator<void> > RecognizeGazeboObjectRequest;

typedef boost::shared_ptr< ::gazebo_test_tools::RecognizeGazeboObjectRequest > RecognizeGazeboObjectRequestPtr;
typedef boost::shared_ptr< ::gazebo_test_tools::RecognizeGazeboObjectRequest const> RecognizeGazeboObjectRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gazebo_test_tools::RecognizeGazeboObjectRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gazebo_test_tools::RecognizeGazeboObjectRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gazebo_test_tools::RecognizeGazeboObjectRequest_<ContainerAllocator1> & lhs, const ::gazebo_test_tools::RecognizeGazeboObjectRequest_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.republish == rhs.republish;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gazebo_test_tools::RecognizeGazeboObjectRequest_<ContainerAllocator1> & lhs, const ::gazebo_test_tools::RecognizeGazeboObjectRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gazebo_test_tools

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::gazebo_test_tools::RecognizeGazeboObjectRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gazebo_test_tools::RecognizeGazeboObjectRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gazebo_test_tools::RecognizeGazeboObjectRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gazebo_test_tools::RecognizeGazeboObjectRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gazebo_test_tools::RecognizeGazeboObjectRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gazebo_test_tools::RecognizeGazeboObjectRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gazebo_test_tools::RecognizeGazeboObjectRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9c648453b842979d1b130dac86a455cf";
  }

  static const char* value(const ::gazebo_test_tools::RecognizeGazeboObjectRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9c648453b842979dULL;
  static const uint64_t static_value2 = 0x1b130dac86a455cfULL;
};

template<class ContainerAllocator>
struct DataType< ::gazebo_test_tools::RecognizeGazeboObjectRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gazebo_test_tools/RecognizeGazeboObjectRequest";
  }

  static const char* value(const ::gazebo_test_tools::RecognizeGazeboObjectRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gazebo_test_tools::RecognizeGazeboObjectRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# name of the object in Gazebo which is to be detected\n"
"# and published as object_msgs/Object.msg\n"
"string name\n"
"\n"
"# If true, continuously re-publish the current\n"
"# state of the object (continuously \"re-recognize\").\n"
"# If false, and the object was previously set to\n"
"# republish, this will stop the re-publishing.\n"
"bool republish\n"
"\n"
;
  }

  static const char* value(const ::gazebo_test_tools::RecognizeGazeboObjectRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gazebo_test_tools::RecognizeGazeboObjectRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.republish);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RecognizeGazeboObjectRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gazebo_test_tools::RecognizeGazeboObjectRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gazebo_test_tools::RecognizeGazeboObjectRequest_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "republish: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.republish);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GAZEBO_TEST_TOOLS_MESSAGE_RECOGNIZEGAZEBOOBJECTREQUEST_H
