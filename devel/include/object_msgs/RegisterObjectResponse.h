// Generated by gencpp from file object_msgs/RegisterObjectResponse.msg
// DO NOT EDIT!


#ifndef OBJECT_MSGS_MESSAGE_REGISTEROBJECTRESPONSE_H
#define OBJECT_MSGS_MESSAGE_REGISTEROBJECTRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace object_msgs
{
template <class ContainerAllocator>
struct RegisterObjectResponse_
{
  typedef RegisterObjectResponse_<ContainerAllocator> Type;

  RegisterObjectResponse_()
    : success(0)  {
    }
  RegisterObjectResponse_(const ContainerAllocator& _alloc)
    : success(0)  {
  (void)_alloc;
    }



   typedef int8_t _success_type;
  _success_type success;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(SUCCESS)
  #undef SUCCESS
#endif
#if defined(_WIN32) && defined(EXISTS)
  #undef EXISTS
#endif
#if defined(_WIN32) && defined(ERROR_INFO)
  #undef ERROR_INFO
#endif

  enum {
    SUCCESS = 0,
    EXISTS = 1,
    ERROR_INFO = 2,
  };


  typedef boost::shared_ptr< ::object_msgs::RegisterObjectResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::object_msgs::RegisterObjectResponse_<ContainerAllocator> const> ConstPtr;

}; // struct RegisterObjectResponse_

typedef ::object_msgs::RegisterObjectResponse_<std::allocator<void> > RegisterObjectResponse;

typedef boost::shared_ptr< ::object_msgs::RegisterObjectResponse > RegisterObjectResponsePtr;
typedef boost::shared_ptr< ::object_msgs::RegisterObjectResponse const> RegisterObjectResponseConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::object_msgs::RegisterObjectResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::object_msgs::RegisterObjectResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::object_msgs::RegisterObjectResponse_<ContainerAllocator1> & lhs, const ::object_msgs::RegisterObjectResponse_<ContainerAllocator2> & rhs)
{
  return lhs.success == rhs.success;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::object_msgs::RegisterObjectResponse_<ContainerAllocator1> & lhs, const ::object_msgs::RegisterObjectResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace object_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::object_msgs::RegisterObjectResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_msgs::RegisterObjectResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::object_msgs::RegisterObjectResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::object_msgs::RegisterObjectResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_msgs::RegisterObjectResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_msgs::RegisterObjectResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::object_msgs::RegisterObjectResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b9c25147bff223b8f5fb48665bb7c161";
  }

  static const char* value(const ::object_msgs::RegisterObjectResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb9c25147bff223b8ULL;
  static const uint64_t static_value2 = 0xf5fb48665bb7c161ULL;
};

template<class ContainerAllocator>
struct DataType< ::object_msgs::RegisterObjectResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "object_msgs/RegisterObjectResponse";
  }

  static const char* value(const ::object_msgs::RegisterObjectResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::object_msgs::RegisterObjectResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"# succes flag\n"
"byte success\n"
"\n"
"# successfully registered\n"
"byte SUCCESS=0\n"
"\n"
"# object already registered\n"
"byte EXISTS=1\n"
"\n"
"# could not query required information for this object\n"
"byte ERROR_INFO=2\n"
"\n"
;
  }

  static const char* value(const ::object_msgs::RegisterObjectResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::object_msgs::RegisterObjectResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.success);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RegisterObjectResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::object_msgs::RegisterObjectResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::object_msgs::RegisterObjectResponse_<ContainerAllocator>& v)
  {
    s << indent << "success: ";
    Printer<int8_t>::stream(s, indent + "  ", v.success);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OBJECT_MSGS_MESSAGE_REGISTEROBJECTRESPONSE_H
